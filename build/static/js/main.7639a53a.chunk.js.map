{"version":3,"sources":["components/Clicker.js","services/notes.js","components/Notes.js","index.js"],"names":["ClicksHistory","clicks","length","join","Clicker","props","useState","left","right","setClicks","allClicks","setAllClicks","onClick","concat","Axios","get","newNote","post","id","changedNote","patch","NoteItem","note","onChangeImportance","className","important","content","date","Notification","msg","Notes","notes","setNotes","setNewNote","isShowAll","setIsShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","find","n","res","console","info","map","catch","error","setTimeout","filter","type","checked","onChange","htmlFor","onSubmit","event","preventDefault","o","Date","toString","Math","random","value","target","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7639a53a.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\n// Part1 Clicker\n\n// const ClicksHistory = ({clicks}) => {\n//   let msg = \"\"\n//   if (clicks.length == 0) {\n//     msg = \"recording click history\"\n//   }\n//   else {\n//     msg = clicks.join('')\n//   }\n//   return (\n//      <div>{msg}</div>\n//   )\n// }\n\nconst ClicksHistory = ({clicks}) => \n  (clicks.length === 0)? \"recording click history\":clicks.join('')\n\nconst Clicker = (props) => {\n  // const [left, setLeft] = useState(0)\n  // const [right, setRight] = useState(0)\n  const [clicks, setClicks] = useState({\n    left: 0, right: 0\n  })\n  const [allClicks, setAllClicks] = useState([])\n\n  const handleLeftClick = () => {\n    setClicks({\n      left: clicks.left + 1,\n      right: clicks.right // 不可省略？\n    })\n    setAllClicks(allClicks.concat('L'))\n  }\n// 或者按以下方式省略\n  const handleRightClick = () => {\n    setClicks({\n      ...clicks,\n      right: clicks.right + 1\n    })\n    setAllClicks(allClicks.concat('R'))\n  }\n\n  return (\n    <div>\n      <p>\n        left: {clicks.left} &nbsp;\n        <button onClick={handleLeftClick}>setLeft</button>\n      </p>\n      <p>\n        right: {clicks.right} &nbsp;\n        <button onClick={handleRightClick}>setRight</button>\n      </p>\n      <p><ClicksHistory clicks={allClicks}/></p>\n    </div>\n  )\n}\nexport default Clicker","import Axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    return Axios.get(baseUrl)\n} \n\nconst create = newNote => {\n    return Axios.post(baseUrl, newNote)\n}\n\nconst update = (id, changedNote) => {\n    return Axios.patch(`${baseUrl}/${id}`, changedNote)\n}\n\n// export default {\n//     getAll: getAll,\n//     create: create,\n//     update: update\n// }\n//  ==\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport noteService from '../services/notes.js'\nimport './Notes.css'\n\nconst NoteItem = ({note, onChangeImportance}) => {\n\n  return <div className='note'>\n    <header>\n      Note #{note.id}\n    <button onClick={onChangeImportance}>change importance</button>\n    </header>\n    <p>{note.important?'💥':''}{note.content}</p>\n    <footer>{note.date}</footer>\n  </div>\n}\n\nconst Notification = ({ msg }) => {\n  return msg === null\n    ? null\n    : <div className='error'>{ msg }</div>\n}\n\nconst Notes = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [isShowAll, setIsShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data)\n      }) \n      // useEffect如果第二个参数是一个空数组 []，那么这个effect只在组件的第一次渲染时运行。\n      // useEffect的第二个参数是一个包括了在当前 useEffect 中所使用的的变量的数组，如果其中某个变量变更【Object.is判断】了，那么在最近一次渲染后，这个useEffect会被重新执行；\n      // 如果传入的是一个空数组，那么除了第一次挂载组件时会执行，其他时间更新组件的时候不会执行，因为不依赖任何变量，也就是依赖不会变更，经常被用于模拟 componentDidMount，但是还是存在区别的。\n  }, [])\n\n  // 处理表单提交\n  const onSubmitNote = (event) => {\n    event.preventDefault()\n    let o = {\n      // id: notes.length + 1, // no need to post\n      content: newNote,\n      date: (new Date()).toString(),\n      important: Math.random() < 0.5\n    }\n    noteService\n      .create(o)\n      .then(res => {\n        setNotes([...notes, res.data])\n        setNewNote('')\n      })\n  }\n\n  // 处理文本框  受控组件\n  const onInputChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  // 处理checkbox  受控组件\n  const onCheckBoxChange = () => {\n    setIsShowAll(!isShowAll)\n    // console.info(isShowAll) // isshowall not change after setting new value    \n  }\n\n  const notesToShow = () => notes.filter(n => isShowAll || n.important)\n\n  const showError = msg => {\n    setErrorMessage(msg)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  // 更改noet的important\n  const onChangeImportance = (id) => {\n    const note = notes.find(n => n.id === id) \n\n    // 不建议这样做，因为变量 note 是对处于组件状态 notes 数组中某个项的引用，\n    // 而且我们记得在 React 中绝不能直接修改状态。\n    // note.important = !note.important\n    const changedNote = {important: !note.important}\n    noteService  // 我们可以用 HTTP PUT 请求替换 整个便笺，或者只用 HTTP PATCH 请求更改便笺的一些属性。\n      .update(id, changedNote)\n      .then(res => {\n        console.info(res)\n        setNotes(notes.map((n) => n.id === id ? res.data : n))\n      })\n      .catch(error => { // 更改已经删除的note\n        showError(`error`)\n        console.error('err', error)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  // do not use the index offered by map func\n  return (\n    <div>\n      <Notification msg={errorMessage} />\n      <input id=\"showAll\" type=\"checkbox\" checked={isShowAll} onChange={onCheckBoxChange}/>\n      <label htmlFor=\"showAll\">ShowALL</label>\n      <form onSubmit={onSubmitNote}>\n        <input type=\"text\" value={newNote} onChange={onInputChange}/>\n        <button type=\"submit\" >Add</button>\n      </form>\n      \n      <p>showing {isShowAll ? 'All' : 'important'}</p>\n      {\n        notesToShow()\n          .map(n => <NoteItem key={n.id} \n                              note={n} \n                              onChangeImportance={()=>onChangeImportance(n.id)}/>)\n      }\n    </div>\n    \n  )\n}\nexport default Notes;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Clicker from './components/Clicker'\nimport Notes from './components/Notes'\n\nconst notes = [\n  // {\n  //   id: 1,\n  //   content: 'HTML is easy',\n  //   date: '2019-05-30T17:30:31.098Z',\n  //   important: true\n  // },\n  // {\n  //   id: 2,\n  //   content: 'Browser can execute only Javascript',\n  //   date: '2019-05-30T18:39:34.091Z',\n  //   important: false\n  // },\n  // {\n  //   id: 3,\n  //   content: 'GET and POST are the most important methods of HTTP protocol',\n  //   date: '2019-05-30T19:20:14.298Z',\n  //   important: true\n  // }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clicker />\n    <Notes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}